apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

##########################################################################################
# [RESOURCES] Resources with default settings
#
# You can add additional resources to the end of this section if needed
##########################################################################################
resources:
  # [REQUIRED] Resources for the default Sourcegraph instance
  - ../../base/sourcegraph # -- Resources for Sourcegraph
  # Add additional resources below this line if needed

##########################################################################################
# [NAMESPACE] Add namespace to all resources generated by this overlay
#
# NOTE: Include the 'namespace' component to create namespace with the same name if needed
##########################################################################################
namespace: sourcegraph

##########################################################################################
# [COMPONENTS] Uncomment the lines for the components you'd like to include
#
# To configure your Sourcegraph deployment, uncomment the components/section
# below following the instructions in our configuration docs.
#
# Components with CONFIG KEYS require additional input in [BUILD CONFIGURATIONS] section
# at the bottom of this file
#
# Docs:
# https://docs.sourcegraph.com/admin/deploy/kubernetes/kustomize/configure
##########################################################################################

components:
  #---------------------------------------------------------------------------------------
  # Namespace Creation
  #---------------------------------------------------------------------------------------
  # - ../../components/resources/namespace # -- Create namespace based on NAMESPACE input above

  #---------------------------------------------------------------------------------------
  # Resource Allocation - Instance size based
  #---------------------------------------------------------------------------------------
  # Use size XS resources by default. Include one only.
  # Find your instance size on https://docs.sourcegraph.com/admin/deploy/instance-size
  - ../../components/sizes/xs # -- Allocate resources for size XS instance
  # - ../../components/sizes/s # -- Allocate resources for size S instance
  # - ../../components/sizes/m # -- Allocate resources for size M instance
  # - ../../components/sizes/l # -- Allocate resources for size L instance
  # - ../../components/sizes/xl # -- Allocate resources for size XL instance

  #---------------------------------------------------------------------------------------
  # Storage class
  #---------------------------------------------------------------------------------------
  # - ../../components/storage-class/aws # -- Create storage class resources for AWS EKS
  # - ../../components/storage-class/azure # -- Create storage class resources for Azure AKS
  # - ../../components/storage-class/gcp # -- Create storage class resources for GCP GKE
  # - ../../components/storage-class/trident/ext3 # -- Create storage class resources for Trident, fsType ext3
  # - ../../components/storage-class/trident/ext4 # -- Create storage class resources for Trident, fsType ext4
  # - ../../components/storage-class/trident/xfs # -- Create storage class resources for Trident, fsType xfs
  # - ../../components/storage-class/k3s # -- Configure to use the default storage class in a k3s cluster
  # - ../../components/storage-class/sourcegraph # -- Update storageClassName for all resources to 'sourcegraph'

  # - ../../components/storage-class/update-class-name # -- Update storageClassName to $STORAGECLASS_NAME
  # CONFIG KEYS: STORAGECLASS_NAME

  # - ../../components/storage-class/cloud # -- Create a custom storage class for other cloud providers
  # CONFIG KEYS: STORAGECLASS_NAME
  #              STORAGECLASS_PROVISIONER
  #              STORAGECLASS_PARAM_TYPE

  # - ../../components/storage-class/ssd # -- Create resources to use local SSDs - requires RBACs
  # CONFIG KEYS: SSD_NODE_PATH

  #---------------------------------------------------------------------------------------
  # Use private registry
  #---------------------------------------------------------------------------------------
  # - ../../components/enable/private-registry # -- Update images name to private registry name
  # CONFIG KEYS: PRIVATE_REGISTRY

  #---------------------------------------------------------------------------------------
  # Monitoring Stack
  #---------------------------------------------------------------------------------------
  - ../../components/monitoring # -- Add default resources for Sourcegraph monitoring services
  # - ../../components/monitoring/cadvisor # -- Add resources for cAdvisor (requires privileges)
  # - ../../components/monitoring/privileged # -- Run monitoring stack with privileged and root access
  # - ../../components/remove/daemonset # -- Remove all services with daemonsets: node-exporter & otel
  # - ../../components/remove/otel-collector # -- Remove otel-collector and otel-agent

  #---------------------------------------------------------------------------------------
  # Networking
  #---------------------------------------------------------------------------------------
  # - ../../components/remove/default-ingress # -- Remove the default ingress from frontend
  # - ../../components/network/nodeport/30080 # -- Use nodeport 30080 for frontend service
  # - ../../components/network/loadbalancer # -- Use load balancer type for frontend service
  # - ../../components/network/network-policy # -- Add NetworkPolicy
  # - ../../components/network/envoy # -- Add EnvoyFilter to resolve known issues caused by service mesh
  # - ../../components/ingress/gke # -- Ingress controller settings for GKE with HTTP load balancing enabled
  # - ../../components/ingress/alb # -- Ingress controller settings for AWS ALB
  # - ../../components/ingress/k3s # -- Ingress controller settings for K3s

  # - ../../components/ingress/hostname # -- Set hostname for your Sourcegraph ingress
  # CONFIG KEYS: HOST_DOMAIN

  # - ../../components/network/tls # -- Enable TLS with exisiting certificates
  # CONFIG KEYS: TLS_HOST
  #              TLS_INGRESS_CLASS_NAME
  #              TLS_CLUSTER_ISSUER

  #---------------------------------------------------------------------------------------
  # External Services
  # You must add external instances via frontend env vars if you remove the bundled instances
  #---------------------------------------------------------------------------------------
  # - ../../components/remove/pgsql/deployment # -- Remove default database deployment for frontend
  # - ../../components/remove/pgsql/statefulset # -- Remove default database statefulset for frontend
  # - ../../components/remove/codeintel-db/deployment # -- Remove default database deployment for code-intel
  # - ../../components/remove/codeintel-db/statefulset # -- Remove default database statefulset for code-intel
  # - ../../components/remove/codeinsights-db/deployment # -- Remove default database deployment for code-insights
  # - ../../components/remove/codeinsights-db/statefulset # -- Remove default database statefulset for code-insights

  # - ../../components/remove/redis # -- Remove embedded redis instance

  # - ../../components/services/redis # -- Use external redis servers
  # CONFIG KEYS: REDIS_CACHE_ENDPOINT
  #              REDIS_STORE_ENDPOINT

  #---------------------------------------------------------------------------------------
  # Other Configurations
  #---------------------------------------------------------------------------------------
  # - ../../components/clusters/k3s # -- Configure instance to run in a k3s cluster (storage class, network, etc)
  # - ../../components/clusters/minikube # -- Configure instance to run in a minikube cluster (storage class, network, etc)
  # - ../../components/enable/rockskip # -- Enable rockskip
  # - ../../components/disable/rockskip # -- Disable rockskip
  # - ../../components/enable/ssh/non-root # Enable SSH to clon repositories as non-root user
  # - ../../components/enable/ssh/root # Enable SSH to clon repositories as root user
  # - ../../components/remove/pvcs # -- Remove all pvcs resources
  # ../../components/remove/prometheus # -- Remove prometheus
  # - ../../components/remove/resources # -- Remove resources (Limits, requests) from all containers
  # - ../../components/remove/security-context # -- Remove security context from all resources
  # - ../../components/utils/uid # -- Run all Postgres database with valid users on host
  # - ../../components/utils/multi-version-upgrade # -- Scale down non-database pods to 0 for multi-version upgrade
  # - ../../components/utils/migrate-to-nonprivileged # -- Component for migrating from privileged to non-privileged

  # ------------------------------------------------------------------------
  # Keep these as the LAST components
  # ------------------------------------------------------------------------
  # - ../../components/privileged # -- Run Sourcegraph with privileged and root access
  # Recommended for clusters with RBAC enabled.
  # - ../../components/enable/service-discovery # -- Enable service-discovery for frontend
#
##########################################################################################
# [SECRETS GENERATOR] Turns the contents of the secret files into Kubernetes secrets
#
# Copy and paste all the associated files to the root of this directory
##########################################################################################

# secretGenerator:
#   # - SSH for Gitserver to clone repositories -
#   - name: gitserver-ssh
#     files:
#       - id_rsa
#       - known_hosts
#   # - TLS -
#   - name: sourcegraph-frontend-tls
#     behavior: create
#     files:
#       - tls.crt
#       - tls.key
#   # - Database -
#   - name: dbs-secrets
#     files:
#       - secrets.env

##########################################################################################
# [CUSTOM RESOURCES] Add files as patches to customize resources
#
# Create a directory `patches` and then copy the required files as
# instructed by the configuration docs to update ConfigMaps and other
# resources using patch files to customize your deployment
##########################################################################################

# patchesStrategicMerge:
#   - patches/frontend-ingress.annotations.yaml # Add new annotations to frontend ingress
#   - patches/frontend-env-vars.yaml # Update env vars in frontend
#   - patches/prometheus.ConfigMap.yaml
#   - patches/pgsql.ConfigMap.yaml
#   - patches/otel-collector.ConfigMap.yaml
#   - patches/custom.NodePort.yaml
#   - patches/resources.yaml

##########################################################################################
# [BUILD CONFIGURATIONS] Handles updating configs using env vars for kustomize
#
# Enter the configuration values as instructed by components used
# Always refer to the component’s documentation or comments before updating
##########################################################################################

# configMapGenerator:
#   - name: sourcegraph-kustomize-env
#     behavior: merge
#     literals:
#       - PRIVATE_REGISTRY=index.docker.io
#       - STORAGECLASS_NAME=sourcegraph
#       - STORAGECLASS_PROVISIONER=
#       - STORAGECLASS_PARAM_TYPE=
#       - HOST_DOMAIN=
#       - TLS_HOST=
#       - TLS_INGRESS_CLASS_NAME=
#       - TLS_CLUSTER_ISSUER=
#       - SSD_NODE_PATH=/mnt/disks/ssd0
#       - AWS_MANAGED_CERT_ARN=
#       - GKE_MANAGED_CERT_NAME=

##########################################################################################
# DEPLOY INSTRUCTIONS
#
# Build Manifests: kubectl kustomize instances/$CURRENT_DIR -o cluster.yaml
# Review Manifests: less cluster.yaml
# kubectl apply --prune -l deploy=sourcegraph -f cluster.yaml
##########################################################################################
