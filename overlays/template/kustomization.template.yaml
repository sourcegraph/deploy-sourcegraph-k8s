apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
############################################################################
#
# HOW TO USE:
#
# To configure your Sourcegraph deployment, uncomment the components/section
# below following the instruction in our configuration docs.
#
# We strongly recommend using 'sizes' components to allocate resources
#
# Docs:
# https://docs.sourcegraph.com/admin/deploy/kubernetes/kustomize/configure
#
############################################################################
# Resources for all Sourcegraph services with default settings
resources:
  - ../../base/sourcegraph

############################################################################
#
# NAMESPACE
#
# Update namespace for resources generated by this overlay
# NOTE: To create namespace resources, include the namespace component
#
############################################################################
namespace: default

############################################################################
#
# COMPONENTS
#
# Uncomment the lines for the components you'd like to include(enable)
#
############################################################################
components:
  # Add resources for Sourcegraph monitoring stack
  # cadvisor is not included in mointoring stack by default
  # NOTE: cadvisor only works with privilege
  - ../../components/monitoring
  # ------------------------------------------------------------------------
  # Run Sourcegraph Monitoring Stack with privileged and root access
  # This also adds RBAC resources to the Sourcegraph Monitoring Stack
  # Privilege and RBAC-enabled cluster required
  # NOTE: Does not include cadvisor
  - ../../components/monitoring/privileged
  # ------------------------------------------------------------------------
  # Deploy cadvisor - runs with privilege
  # Create service account with cluster admin role
  # Privilege and RBAC-enabled cluster required
  - ../../components/monitoring/cadvisor
  # ------------------------------------------------------------------------
  # Create namespace resources based on NAMESPACE value provided above
  - ../../components/namespace
  # ------------------------------------------------------------------------
  # Run Sourcegraph with privileged and root access
  # Privilege and RBAC-enabled cluster required
  - ../../components/privileged
  # ------------------------------------------------------------------------
  # Allocate resources based on instance size:
  - ../../components/sizes/xs
  - ../../components/sizes/s
  - ../../components/sizes/m
  - ../../components/sizes/l
  - ../../components/sizes/xl
  # ------------------------------------------------------------------------
  # Allocate resources based on custom values input
  # REQUIRED: Update values in 'components/custom/resources/resources.yaml'
  - ../../components/custom/resources
  # ------------------------------------------------------------------------
  # Remove all services with daemonsets resources: node-exporter and otel
  - ../../components/remove/daemonset
  # ------------------------------------------------------------------------
  # Remove all security-context fields
  - ../../components/remove/security-context
  # ------------------------------------------------------------------------
  # Update the following env vars in the **OVERLAY CONFIGURATIONS** section
  # - PRIVATE_REGISTRY
  - ../../components/private-registry
  # ------------------------------------------------------------------------
  # Disable or enable rockskip
  - ../../components/disable/rockskip # Disable
  - ../../components/enable/rockskip # Enable
  # ------------------------------------------------------------------------
  # Use nodeport 30080 for frontend
  - ../../components/nodeport/30080
  # ------------------------------------------------------------------------
  # Use load balancer type for frontend
  - ../../components/ingress/frontend-loadbalancer
  # ------------------------------------------------------------------------
  # Remove the default ingress from frontend
  - ../../components/remove/default-ingress
  # ------------------------------------------------------------------------
  # Remove all pvcs resources
  - ../../components/remove/pvcs
  # ------------------------------------------------------------------------
  # Remove resources (Limits, requests) from all containers
  - ../../components/remove/resources
  # ------------------------------------------------------------------------
  # Use network-policy
  - ../../components/network-policy
  # ------------------------------------------------------------------------
  # Use custom redis servers
  # Update the following env vars in the **FRONTEND ENV VARS**
  # section located at the bottom of this file:
  # - REDIS_CACHE_ENDPOINT
  # - REDIS_STORE_ENDPOINT
  - ../../components/redis
  # ------------------------------------------------------------------------
  # Use ssh to clon repositories
  # Also see GENERATE SECRETS sections for importing ssh files
  - ../../components/ssh/non-root # Non-root user
  - ../../components/ssh/root # Root user
  # ------------------------------------------------------------------------
  # Create storage class resources for cloud providers
  #
  # Do not include more than one storage class from this list
  - ../../components/storage-class/aws # For aws
  - ../../components/storage-class/azure # For azure
  - ../../components/storage-class/gcp # For gcp
  - ../../components/storage-class/trident/ext3 # For Trident fsType ext3
  - ../../components/storage-class/trident/ext4 # For Trident fsType ext4
  - ../../components/storage-class/trident/xfs # For Trident fsType xfs
  # ------------------------------------------------------------------------
  # For other cloud providers
  #
  # Update the following env vars in the **OVERLAY CONFIGURATIONS** section:
  # - STORAGECLASS_NAME
  # - STORAGECLASS_PROVISIONER
  # - STORAGECLASS_PARAM_TYPE
  - ../../components/storage-class/cloud
  # ------------------------------------------------------------------------
  # Create resources to use local SSDs - RBACs required
  #
  # Update the following env vars in the **OVERLAY CONFIGURATIONS** section:
  # section located at the bottom of this file:
  # - SSD_NODE_PATH
  - ../../components/ssd
  # ------------------------------------------------------------------------
  # To enable TLS
  #
  # Update the following env vars in the **OVERLAY CONFIGURATIONS** section:
  # - TLS_HOST
  # - TLS_INGRESS_CLASS_NAME
  # - TLS_CLUSTER_ISSUER
  #
  # Add tls.crt & tls.key to the config directory
  # Then uncomment all TLS fields in "secretGenerator" section below
  - ../../components/tls
  # ------------------------------------------------------------------------
  # Set hostname for your Sourcegraph ingress
  #
  # Update the following env vars in the **OVERLAY CONFIGURATIONS** section:
  # - HOST_DOMAIN=your.company.com
  - ../../components/hostname
  # ------------------------------------------------------------------------
  # Run as arbitrary users in all Postgres database
  - ../../components/uid
  # ------------------------------------------------------------------------
  # Enable service-discovery for frontend service
  # It is strongly recommended for clusters with RBAC enabled.
  # IMPORTANT: Comment the ENDPOINT UPDATE section when using this component
  - ../../components/enable/service-discovery
  # ------------------------------------------------------------------------
  # Update and generate resources from the old cluster
  # This includes:
  # - the monitoring stack and cadvisor
  # - searcher and symbols as Deployment
  # - run as root, privilieged
  # - include RBAC resources
  # This should only be used to generate old cluster for comparision purpose
  # IMPORTANT: Comment the ENDPOINT UPDATE section when using this component
  - ../../components/old-cluster
  # ------------------------------------------------------------------------

############################################################################
#
# UPDATE CONFIGMAP
#
# Create a directory `patches` and then copy the required files when
# instructed by the configuration docs to update ConfigMaps
#
# This will ensure the files are in the correct location for the
# configuration process to access them.
#
############################################################################
patchesStrategicMerge:
  # - patches/prometheus.ConfigMap.yaml
  # - patches/pgsql.ConfigMap.yaml
  # - patches/otel-collector.ConfigMap.yaml
  # - patches/custom.NodePort.yaml
  # -
  # -
  # -
  # -
  # -
  # -
  # -
  # -
  # -
  # -

############################################################################
#
# UPDATE ANNOTATIONS
#
# Add new annotations at the end of this section for frontend ingress
#
############################################################################
transformers:
  - |-
    fieldSpecs:
      - kind: Ingress
        name: sourcegraph-frontend
        path: metadata/annotations
        create: true
    apiVersion: builtin
    kind: AnnotationsTransformer
    metadata:
      name: annotations-transformer
    annotations:
      # Add new annotations below
      # Ex. kubernetes.io/ingress.class: alb
      # 
      # 
      #
      # 
      #

############################################################################
#
# GENERATE SECRETS
#
# copy and paste the associated certificate files, such as `tls.crt`,
# `tls.key`, and `known_hosts`, to the root of this overlay. The
# secretGenerator will turn the contents of the files into Kubernetes secrets
#
############################################################################
secretGenerator:
  # Generate secrets for gitserver to use ssh
  - name: gitserver-ssh
    files:
      - id_rsa
      - known_hosts

  - name: sourcegraph-frontend-tls
    behavior: create
    files:
      - tls.crt
      - tls.key
      - additional.file
      - additional.file
      - additional.file

  # Generate secrets for database
  - name: dbs-secrets
    files:
      - secrets.env
      - additional.file
      - additional.file
      - additional.file
      - additional.file
      - additional.file

############################################################################
#
# OVERLAY CONFIGURATIONS
#
# Enter the configuration values as instructed by components used
# Always refer to the component’s documentation or comments before updating
#
############################################################################
configMapGenerator:
  # Handle updating configs using env vars for kustomize
  - name: sourcegraph-kustomize-env
    behavior: merge
    literals:
      - NAME=sourcegraph-kustomize
      # - TLS_HOST=
      # - TLS_INGRESS_CLASS_NAME=
      # - TLS_CLUSTER_ISSUER=
      # - STORAGECLASS_NAME=
      # - STORAGECLASS_PROVISIONER=
      # - STORAGECLASS_PARAM_TYPE=
      # - PRIVATE_REGISTRY=
      # - AWS_MANAGED_CERT_ARN=
      # - GKE_MANAGED_CERT_NAME=
      # - HOST_DOMAIN=
      # -
      # -
      # -
      # -
      # -
      # -
      # -

  ############################################################################
  #
  # FRONTEND ENV VARS
  #
  # Update environment variables for the sourcegraph-frontend service here
  # These environment variables are used to configure your Sourcegraph instance,
  # such as authentication and authorization settings, feature flags, and more.
  #
  ############################################################################
  # Handle updating env vars for frontend
  - name: sourcegraph-frontend-env
    behavior: merge
    literals:
      # Add env var as instructed below this line
      # - PGDATABASE=
      # - PGHOST=
      # - PGPORT=
      # - PGSSLMODE=
      # - PGUSER=
      # - CODEINSIGHTS_PGDATASOURCE=
      # - CODEINTEL_PGDATABASE=
      # - CODEINTEL_PGHOST=
      # - CODEINTEL_PGPORT=
      # - CODEINTEL_PGSSLMODE=
      # - CODEINTEL_PGUSER=
      # -
      # -
      # -
      # -
      # -
      # -
      # -
      # -
      # -
      # -
      # -
      # -
      # -
      # -
      # -
      # -
