apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    description: Postgres database for various data.
    kubectl.kubernetes.io/default-container: pgsql
  labels:
    deploy: sourcegraph
    sourcegraph-resource-requires: no-cluster-admin
    app.kubernetes.io/component: pgsql
  name: pgsql
spec:
  serviceName: pgsql
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: pgsql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        deploy: sourcegraph
        app: pgsql
        group: backend
    spec:
      initContainers:
        - name: correct-data-dir-permissions
          image: us.gcr.io/sourcegraph-dev/alpine-3.14:wip_v5.2.123456@sha256:5246be9bb9b82ba570a06d0bfaa3f00704471a3e8abfbe3a2c1b32a6076dceb9
          command: ["sh", "-c", "if [ -d /data/pgdata-12 ]; then chmod 750 /data/pgdata-12; fi"]
          volumeMounts:
            - mountPath: /data
              name: disk
          securityContext:
            # Required to prevent escalations to root.
            allowPrivilegeEscalation: false
            runAsUser: 999
            runAsGroup: 999
          resources:
            limits:
              cpu: "10m"
              memory: "50Mi"
            requests:
              cpu: "10m"
              memory: "50Mi"
      containers:
        - name: pgsql
          image: us.gcr.io/sourcegraph-dev/postgres-12-alpine:wip_v5.2.123456@sha256:7c8699e4181f2cc289dfbe84efddd98e8438ea6f917144b6831d081ddd2ef672
          terminationMessagePolicy: FallbackToLogsOnError
          readinessProbe:
            exec:
              command:
                - /ready.sh
          livenessProbe:
            initialDelaySeconds: 15
            exec:
              command:
                - /liveness.sh
          startupProbe:
            exec:
              command:
                - /liveness.sh
            failureThreshold: 360
            periodSeconds: 10
          ports:
            - name: pgsql
              containerPort: 5432
          resources:
            limits:
              cpu: "4"
              memory: 4Gi
            requests:
              cpu: "4"
              memory: 4Gi
          securityContext:
            # Required to prevent escalations to root.
            allowPrivilegeEscalation: false
            runAsUser: 999
            runAsGroup: 999
          volumeMounts:
            - mountPath: /data
              name: disk
            - mountPath: /conf
              name: pgsql-conf
            - mountPath: /dev/shm
              name: dshm
        - env:
            - name: DATA_SOURCE_NAME
              value: postgres://sg:@localhost:5432/?sslmode=disable
            - name: PG_EXPORTER_EXTEND_QUERY_PATH
              value: /config/queries.yaml
          image: us.gcr.io/sourcegraph-dev/postgres_exporter:wip_v5.2.123456@sha256:9a5a58b7c0454b490850b412e7436380b5d41338c664a68f834068ee874bcbee
          terminationMessagePolicy: FallbackToLogsOnError
          name: pgsql-exporter
          ports:
            - name: pgsql-exporter
              containerPort: 9187
          resources:
            limits:
              cpu: 10m
              memory: 50Mi
            requests:
              cpu: 10m
              memory: 50Mi
      terminationGracePeriodSeconds: 120
      securityContext:
        runAsUser: 999
        fsGroup: 999
        fsGroupChangePolicy: OnRootMismatch
      volumes:
        - name: disk
          persistentVolumeClaim:
            claimName: pgsql
        - name: pgsql-conf
          configMap:
            # 511 in decimal = 0777 in octal
            defaultMode: 511
            name: pgsql-conf
        - name: dshm # Allocate shared memory to match the shared_buffers value
          emptyDir:
            medium: Memory
            sizeLimit: 1G
